
binascii.rledecode_hqx(data)

    Perform RLE-decompression on the data, as per the binhex4 standard. The algorithm uses 0x90 after a byte as a repeat indicator, followed by a count. A count of 0 specifies a byte value of 0x90. The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the Incomplete exception is raised.

    Changed in version 3.2: Accept only bytestring or bytearray objects as input.

binascii.rlecode_hqx(data)

    Perform binhex4 style RLE-compression on data and return the result.

binascii.b2a_hqx(data)

    Perform hexbin4 binary-to-ASCII translation and return the resulting string. The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment).

binascii.crc_hqx(data, crc)

    Compute the binhex4 crc value of data, starting with an initial crc and returning the result.

binascii.crc32(data[, crc])

    Compute CRC-32, the 32-bit checksum of data, starting with an initial crc. This is consistent with the ZIP file checksum. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm. Use as follows:

    print(binascii.crc32(b"hello world"))
    # Or, in two pieces:
    crc = binascii.crc32(b"hello")
    crc = binascii.crc32(b" world", crc) & 0xffffffff
    print('crc32 = {:#010x}'.format(crc))

Note

To generate the same numeric value across all Python versions and platforms use crc32(data) & 0xffffffff. If you are only using the checksum in packed binary format this is not necessary as the return value is the correct 32bit binary representation regardless of sign.

binascii.b2a_hex(data)
binascii.hexlify(data)

    Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The returned bytes object is therefore twice as long as the length of data.

binascii.a2b_hex(hexstr)
binascii.unhexlify(hexstr)

    Return the binary data represented by the hexadecimal string hexstr. This function is the inverse of b2a_hex(). hexstr must contain an even number of hexadecimal digits (which can be upper or lower case), otherwise a TypeError is raised.

exception binascii.Error

    Exception raised on errors. These are usually programming errors.

exception binascii.Incomplete

    Exception raised on incomplete data. These are usually not programming errors, but may be handled by reading a little more data and trying again.

See also

Module base64
    Support for RFC compliant base64-style encoding in base 16, 32, 64, and 85.